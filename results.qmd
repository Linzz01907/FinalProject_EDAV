# Results

```{r}
library(tidyverse)
salary_df <- read.csv("Cleaned Dataset.csv")
```

```{r}
select_agency <- salary_df |> 
  filter(Agency.Name == c('DEPT OF ED PEDAGOGICAL','POLICE DEPARTMENT',
'FIRE DEPARTMENT',
'HRA/DEPT OF SOCIAL SERVICES',
'NYC HOUSING AUTHORITY',
 'DEPARTMENT OF SANITATION',
"ADMIN FOR CHILDREN'S SVCS",
'DEPARTMENT OF FINANCE',
'DEPT OF INFO TECH & TELECOMM',
'TAXI & LIMOUSINE COMMISSION'))
```

```{r}
select_title <- select_agency |>  
  filter(Title.Description %in% c("CHILD PROTECTIVE SPECIALIST",
                                  "CHILD PROTECTIVE SPECIALIST SUPERVISOR",
                                  "CITY TAX AUDITOR",
                                  "CLERICAL ASSOCIATE",
                                  "CALL CENTER REPRESENTATIVE",
                                  "COMPUTER SPECIALIST",
                                  "TAXI AND LIMOUSINE INSPECTOR",
                                  "COMMUNITY ASSOCIATE",
                                  "TEACHER",
                                  "TEACHER SPECIAL EDUCATION",
                                  "POLICE OFFICER",
                                  "SCHOOL SAFETY AGENT",
                                  "FIREFIGHTER",
                                  "EMERGENCY MEDICAL SPECIALIST-EMT",
                                  "ELIGIBILITY SPECIALIST",
                                  "JOB OPPORTUNITY SPECIALIST",
                                  "CARETAKER",
                                  "MAINTENANCE WORKER",
                                  "SANITATION WORKER",
                                  "CITY SEASONAL AIDE"))
```

```{r Salary Level}
library(dplyr)
df <- select_title |>  
  mutate(AnnualSalary = case_when(
    Pay.Basis == "per Annum" ~ 1,
    Pay.Basis == "per Day" ~ 260,
    Pay.Basis == "per Hour" ~ 260 * 8,
    Pay.Basis == "Prorated Annual" ~ 1
  ))

salary_new <- df |> 
  mutate(AnnualSalary = AnnualSalary * Base.Salary)

fivenum(salary_new$AnnualSalary)
# 6461  58692  80788  95105 143858

salary_new <- salary_new |>
  mutate(SalaryLevel = case_when(
    AnnualSalary >= 6461 & AnnualSalary <= 58692 ~ "LOW",
    AnnualSalary > 58692 & AnnualSalary <= 80788 ~ "MOD",
    AnnualSalary > 80788 & AnnualSalary <= 95105 ~ "HIGH",
    AnnualSalary > 95105 & AnnualSalary <= 143858 ~ "VHIGH"))
```

```{r Agency Start Time}
salary_new$Agency.Start.Date <- trimws(salary_new$Agency.Start.Date)
salary_new$Agency.Start.Date <- as.Date(salary_new$Agency.Start.Date, format="%m/%d/%Y")
salary_new$CorrentDate <- as.Date("2023-12-01")

salary_new$Agency.Start.Date[salary_new$Agency.Start.Date == as.Date("9999-12-31")] <- as.Date("1999-12-31")

salary_new$days_difference <- as.Date(salary_new$CorrentDate) - as.Date(salary_new$Agency.Start.Date)
salary_new$days_difference <- as.numeric(salary_new$days_difference)
```

```{r total pay_per_hour and agency_size}
salary_new$OT.Hours[salary_new$OT.Hours<0]<-0
salary_new$Regular.Hours[salary_new$Regular.Hours<0]<-0

salary_new$pay_per_hour<-salary_new$Total.OT.Paid/salary_new$OT.Hours
salary_new$pay_per_hour[is.infinite(salary_new$pay_per_hour)| is.na(salary_new$pay_per_hour) |salary_new$pay_per_hour<0] <- 0 


salary_new$job_type <- ifelse(as.numeric(salary_new$Regular.Hours) <= 1000 & as.numeric(salary_new$Regular.Hours) > 0, "part_time", "full_time")

agency_size <- as.data.frame(table(salary_new$Agency.Name))
colnames(agency_size) <- c("Agency.Name", "Agency.Size")
salary <- left_join(salary_new, agency_size, by = join_by(Agency.Name))
```

```{r}
count_by_columnB <- salary %>%
  group_by(job_type) %>%
  summarise(Count = n())
print(count_by_columnB)
```

```{r Correlation Heatmap Plot for Categorical Variables}
# library(dplyr)
library(GGally)
p <- salary_new[, c(2, 4:6, 8,19, 15)]
library(ggcorrplot)
model.matrix(~0+., data=p) %>%
  cor(use="pairwise.complete.obs") %>%
  ggcorrplot(show.diag=FALSE, type="lower", lab=FALSE, lab_size=2)+
  theme(axis.text.x = element_text(size = 5),  # Adjust size as needed for x axis labels
        axis.text.y = element_text(size = 5))
# p <- salary_new[, c(2, 4:6, 8, 15)]
# ggparcoord(p, columns=1:6)
```
**Observation and Analysis:**
We want to find the relationship between 

```{r Scattor Pair Plot for Continous Variables}
ggpairs(select(salary, Agency.Size, days_difference, AnnualSalary), 
        mapping = ggplot2::aes(alpha = 0.5),
        lower = list(continuous = wrap("points", size = 0.1)))
```

```{r Lollipop}
library(gridExtra)
q <- salary_new[, c(2, 5, 14)]
mean_salary_agency <- q %>%
    group_by(Agency.Name) %>%
    summarise(mean_value_agency = mean(AnnualSalary, na.rm = TRUE))

mean_salary_title <- q %>%
    group_by(Title.Description) %>%
    summarise(mean_value_title = mean(AnnualSalary, na.rm = TRUE))

ggplot(mean_salary_agency, aes(x=Agency.Name, y=mean_value_agency)) +
  geom_segment( aes(x=Agency.Name, xend=Agency.Name, y=0, yend=mean_value_agency)) +
  geom_point( size=5, color="red", fill=alpha("orange", 0.3), alpha=0.7, shape=21, stroke=2)+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(mean_salary_title, aes(x=Title.Description, y=mean_value_title)) +
  geom_segment( aes(x=Title.Description, xend=Title.Description, y=0, yend=mean_value_title)) +
  geom_point( size=5, color="red", fill=alpha("orange", 0.3), alpha=0.7, shape=21, stroke=2)+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r Map for Mean Salary}
library(sf)
library(tigris)

nyc_counties <- tigris::counties(state = "NY", cb = TRUE) %>% 
  filter(COUNTYFP %in% c("005", "047", "061", "081", "085"))  # FIPS codes for NYC boroughs


nyc_counties$BoroName <- factor(nyc_counties$NAME,
                                levels = c("Bronx", "Kings", "New York", "Queens", "Richmond"),
                                labels = c("BRONX", "BROOKLYN", "MANHATTAN", "QUEENS", "RICHMOND"))

OThour_data <- salary %>%
  group_by(Work.Location.Borough) %>%
  summarize(Average_salary = mean(AnnualSalary, na.rm = TRUE))


nyc_OThour_map <- merge(nyc_counties, OThour_data, by.x = "BoroName", by.y = "Work.Location.Borough")

# Create the map visualization
ggplot(data = nyc_OThour_map) +
  geom_sf(aes(fill = Average_salary), color = "white", size = 0.5) +
  geom_sf_text(aes(label = BoroName), size = 3, check_overlap = TRUE) +
  scale_fill_viridis_c(name = "Average Hour") +
  labs(title = "Average Hour by NYC Borough") +
  theme_minimal()


df_aggregated <- aggregate(AnnualSalary ~ Work.Location.Borough, data = salary, mean)

coordinates <- data.frame(
  Work.Location.Borough = c("MANHATTAN", "BROOKLYN", "BRONX", "QUEENS", "RICHMOND", "OTHER"),
  x = c(-73.9712, -73.9442, -73.8648, -73.7949, -74.1502, -74.0060),  # Longitude
  y = c(40.7831, 40.6782, 40.8448, 40.7282, 40.5795, 40.7128)         # Latitude
)

df_merged <- merge(df_aggregated, coordinates, by = "Work.Location.Borough")

ggplot(df_merged, aes(x = x, y = y, size = AnnualSalary)) +
    geom_point(alpha = 0.5, color = "pink") +
    geom_text(aes(label = Work.Location.Borough), vjust = -1.5, size = 3.5) +  # Place text above the circles
    scale_size(range = c(10, 35)) +
    theme_void() +
    labs(title = "Average Salary by NYC Borough")
```

```{r Time Series for Mean Salary}
average_salary_agency <- salary %>%
  group_by(Agency.Name, Fiscal.Year) %>%
  summarise(average_salary = mean(AnnualSalary, na.rm = TRUE), .groups = 'drop')

average_salary_agency |>
  ggplot(aes(x=Fiscal.Year, y=average_salary, group=Agency.Name, color=Agency.Name)) +
    geom_line()

average_salary_title <- salary %>%
  group_by(Title.Description, Fiscal.Year) %>%
  summarise(average_salary = mean(AnnualSalary, na.rm = TRUE), .groups = 'drop')

average_salary_title |> 
  ggplot(aes(x=Fiscal.Year, y=average_salary, group=Title.Description, color=Title.Description)) +
    geom_line()
```

```{r Histogram for Mean Salary}
ggplot(average_salary_agency, aes(x = average_salary)) +
  geom_histogram(binwidth = 1000, fill = "lightblue", color = "black") +
  facet_wrap(~Agency.Name) + 
  theme(strip.text.x = element_text(size = 7))+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

ggplot(average_salary_title, aes(x = average_salary)) +
  geom_histogram(binwidth = 2000, fill = "lightblue", color = "black") +
  facet_wrap(~Title.Description) + 
  theme(strip.text.x = element_text(size = 7))+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

## OverTime Hour and OverTime Pay
# Correlation between OverTime Hour/Pay with other variables 
Based on the related variables of base salary from part 1, we intend to explore the relationship between over time and them.
Part 1. Correlation between OverTime Hour/Pay with category variables

```{r Box Plot}
library(ggplot2)
ggplot(salary, aes(x = Agency.Name, y = OT.Hours)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Box Plot of OT.Hours across Different Agencies",
       x = "Agency Name",
       y = "OT Hours")

ggplot(salary, aes(x = Title.Description, y = OT.Hours)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Box Plot of OT.Hours across Different Titles",
       x = "Title Description",
       y = "OT Hours")

ggplot(salary, aes(x = job_type, y = OT.Hours)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Box Plot of OT.Hours across Different Titles",
       x = "Job_type",
       y = "OT Hours")


ggplot(salary, aes(x = Work.Location.Borough, y = OT.Hours)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Box Plot of OT.Hours across Different Work Locations",
       x = "Work Locations",
       y = "OT Hours")


salary_tep2<-salary
salary_tep2<-salary_tep2[salary_tep2$pay_per_hour > 0 & salary_tep2$pay_per_hour <200, ]



ggplot(salary_tep2, aes(x = Agency.Name, y = pay_per_hour)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Box Plot of pay_per_hour across Different Agencies",
       x = "Agency Name",
       y = "OT Pay per Hours")

ggplot(salary_tep2, aes(x = Title.Description, y = pay_per_hour)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Box Plot of pay_per_hour across Different Titles",
       x = "Title Description",
       y = "OT Pay per Hours")

ggplot(salary_tep2, aes(x = job_type, y = pay_per_hour)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Box Plot of pay_per_hour across Different Titles",
       x = "Job_type",
       y = "OT Pay per Hours")

ggplot(salary_tep2, aes(x = Work.Location.Borough, y = pay_per_hour)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Box Plot of pay_per_hour across Different Work Locations",
       x = "Work_Location",
       y = "OT Pay per Hours")


# ANOVA for Agency.Name and OT.Hours
anova_agency <- aov(OT.Hours ~ Agency.Name, data = salary)
summary(anova_agency)

# ANOVA for Title.Description and OT.Hours
anova_title <- aov(OT.Hours ~ Title.Description, data = salary)
summary(anova_title)

# ANOVA for job_type and OT.Hours
anova_job <- aov(OT.Hours ~ job_type, data = salary)
summary(anova_job)

anova_location <- aov(OT.Hours ~ Work.Location.Borough, data = salary)
summary(anova_location)


# ANOVA for Agency.Name and Total.OT.Paid
anova_agency <- aov(pay_per_hour ~ Agency.Name, data = salary_tep2)
summary(anova_agency)

# ANOVA for Title.Description and Total.OT.Paid
anova_title <- aov(pay_per_hour ~ Title.Description, data = salary_tep2)
summary(anova_title)

# ANOVA for job_title and Total.OT.Paid
anova_job <- aov(pay_per_hour ~ job_type, data = salary_tep2)
summary(anova_title)

anova_location <- aov(pay_per_hour ~ Work.Location.Borough, data = salary_tep2)
summary(anova_location)
```
Here we use the ANOVA test to evaluate the correlation between Over Time Hour/Pay and Agency.Name, Title.Description, Job_type, Work.Location. The result shows that Agency.Name, Title.Description, Job_type, Work.Location have low P-value which indicates significant differences between them. Therefore, it proves that they have correlation. 
To visualize the test, We use box plot to show the distribution or mean levels of the variable of interest Over Time Hour/Pay across different groups like Agency.Name, Title.Description, Job_type, Work.Location. Expect for Box Plot of pay_per_hour across Different Work Locations, the medium line inside the boxes has noticeably different levels for different categories. Second, for each graph, there exist varying box zizes which represents the significantly different interquartile ranges. Here we consider plot 1 as a reference. the agency like Children's SVCS, Sanitation, Fire Department, Social Services, NYC Housing, Police have more variability than the other groups. Third, there exist various symmetry of the boxes. The agencies like Children's SVCS, Social Service, Taxi & Limousine represent left-skewness distribution, while Sanitation, Fire Department, NYC Housing, Police shows zero-skewness distribution. Fourth, we observe the different numbers of outliers among groups. Info Tech Department has less outliers than other groups which suggests that this group has less extreme values.
Considering Box Plot of pay_per_hour across Different Work Locations, it shows the similar medium line and box sizes and the different parts like symmetry and outliers are not obvious than other graphs. Based on the ANOVA test, we think that Over Time pay per hour is related to Work Locations.

Part 1. correlation between OverTime Hour/Pay with numerical variables
```{r Parallell}
library(GGally)
ggparcoord(salary,
           columns = c(11,18,17),  groupColumn = 5,
           scale='globalminmax',
           title = "Parallel Coordinate Plot for salary Data",
           alphaLines = 0.6)
ggparcoord(salary,
           columns = c(11,18,17),  groupColumn = 4,
           scale='globalminmax',
           title = "Parallel Coordinate Plot for salary Data",
           alphaLines = 0.6)
```

As for plot 1, 
Noticeably, in terms of OT pay per hour, Police has more outliers(purple line) than the other jobs which indicates it has more high 'OT Paid' than other job titles.


#police


```{r Map}

library(sf)
library(tigris)


# Obtain geospatial data for New York counties
nyc_counties <- tigris::counties(state = "NY", cb = TRUE) %>% 
  filter(COUNTYFP %in% c("005", "047", "061", "081", "085"))  # FIPS codes for NYC boroughs


nyc_counties$BoroName <- factor(nyc_counties$NAME,
                                levels = c("Bronx", "Kings", "New York", "Queens", "Richmond"),
                                labels = c("BRONX", "BROOKLYN", "MANHATTAN", "QUEENS", "RICHMOND"))

OThour_data <- salary %>%
  group_by(Work.Location.Borough) %>%
  summarize(Average_hour = mean(OT.Hours, na.rm = TRUE))


nyc_OThour_map <- merge(nyc_counties, OThour_data, by.x = "BoroName", by.y = "Work.Location.Borough")
#View(nyc_OThour_map) 

# Create the map visualization
ggplot(data = nyc_OThour_map) +
  geom_sf(aes(fill = Average_hour), color = "white", size = 0.5) +
  geom_sf_text(aes(label = BoroName), size = 3, check_overlap = TRUE) +
  scale_fill_viridis_c(name = "Average Hour") +
  labs(title = "Average Hour by NYC Borough") +
  theme_minimal()


OTpay_perhour <- salary_tep2 %>%
  group_by(Work.Location.Borough) %>%
  summarize(Averagepay_perhour = mean(pay_per_hour, na.rm = TRUE))


nyc_OTpay_perhour_map <- merge(nyc_counties, OTpay_perhour, by.x = "BoroName", by.y = "Work.Location.Borough")
#View(nyc_OThour_map) 

# Create the map visualization
ggplot(data = nyc_OTpay_perhour_map ) +
  geom_sf(aes(fill = Averagepay_perhour), color = "white", size = 0.5) +
  geom_sf_text(aes(label = BoroName), size = 3, check_overlap = TRUE) +
  scale_fill_viridis_c(name = "Average pay per Hour") +
  labs(title = "Average pay per Hour by NYC Borough") +
  theme_minimal()
```
Considering the plot Average Hour by NYC Borough, it is clear that Manhattan has lowest average OT hour than other regions and people in Richmond seems to work overtime commonly. In spite of it, Richmond has the highest overtime pay among all regions in New York. However, Bronx has the lowest overtime pay but a little high over time hours.

```{r Time Series}
averageOThour_by_group  <- salary %>%
  group_by(Agency.Name, Fiscal.Year) %>%
  summarize(Average_hour = mean(OT.Hours, na.rm = TRUE))
averageOThour_by_group |>
  ggplot(aes(x=Fiscal.Year, y=Average_hour, group=Agency.Name, color=Agency.Name)) +
    geom_line()

averageOThour_by_group  <- salary %>%
  group_by(Title.Description, Fiscal.Year) %>%
  summarize(Average_hour = mean(OT.Hours, na.rm = TRUE))
averageOThour_by_group |>
  ggplot(aes(x=Fiscal.Year, y=Average_hour, group=Title.Description, color=Title.Description)) +
    geom_line()


averageOTpay_perhour_by_group  <- salary %>%
  group_by(Agency.Name, Fiscal.Year) %>%
  summarize(Average_OTpay = mean(pay_per_hour, na.rm = TRUE))
averageOTpay_perhour_by_group |>
  ggplot(aes(x=Fiscal.Year, y=Average_OTpay, group=Agency.Name, color=Agency.Name)) +
    geom_line()

averageOTpay_perhour_by_group  <- salary %>%
  group_by(Title.Description, Fiscal.Year) %>%
  summarize(Average_OTpay = mean(pay_per_hour, na.rm = TRUE))
averageOTpay_perhour_by_group |>
  ggplot(aes(x=Fiscal.Year, y=Average_OTpay, group=Title.Description, color=Title.Description)) +
    geom_line()
```

#Distribution of OT hour, OT PAY per hour, rate between overtime and regular time based on agency
```{r Ridgeline}
library(ggridges)

ggplot(salary, aes(x = OT.Hours, y = Agency.Name, fill = Agency.Name)) +
  stat_density_ridges() +
  theme_ridges() +
  labs(title = "Ridgeline Plot of OT Hours by Agency", x = "OT Hours", y = "Agency Name")+
    theme(
    text = element_text(size = 8),
    axis.title = element_text(size = 10),
    axis.text = element_text(size = 8),
    plot.title = element_text(size = 12)
  )


salary_tep3<-salary
salary_tep3<-salary_tep2[salary_tep2$pay_per_hour > 0, ]

ggplot(salary_tep3, aes(x = pay_per_hour, y = Agency.Name, fill = Agency.Name)) +
  stat_density_ridges() +
  theme_ridges() +
  labs(title = "Ridgeline Plot of OT Paid per hour by Agency", x = "OT Hours Paid", y = "Agency Name")+
    theme(
    text = element_text(size = 8),
    axis.title = element_text(size = 10),
    axis.text = element_text(size = 8),
    plot.title = element_text(size = 12)
  )


salary_tep<-salary
salary_tep<-salary_tep[salary_tep$Regular.Hours > 0, ]
salary_tep$OT_per_Regular_Time<-salary_tep$OT.Hours/salary_tep$Regular.Hours
salary_tep<-salary_tep[salary_tep$OT_per_Regular_Time < 1, ]


ggplot(salary_tep, aes(x = OT_per_Regular_Time, y = Agency.Name, fill = Agency.Name)) +
  stat_density_ridges() +
  theme_ridges() +
  labs(title = "Ridgeline Plot of OT Hours rate by Agency", x = "OT Hours rate", y = "Agency Name")+
    theme(
    text = element_text(size = 8),
    axis.title = element_text(size = 10),
    axis.text = element_text(size = 8),
    plot.title = element_text(size = 12)
  )

```
Considering the distribution of OT Hours by Agency, the police department,NYC Housing department, Fire department,Sanitation department,Children's SVCS department have long tail but low peak which means that there exists a certain amount of employees have long over time hours in these departments, while the over time distribution of other departments is more like a normal and OT hours are mostly 0.
Considering the distributio of OT Paid per hour by Agency, some departments are multimodal like Police department, Fire department, Sanitation department, Finance department which indicates 


Marks: The plot 2 and 3 don't include 'DEPT OF ED PEDAGOGICAL', since all the regular hour and OT hour of this apartment is 0 which will be shown later.





```{r Bubble}

salary_tep2<-salary
salary_tep2<-salary_tep2[salary_tep2$pay_per_hour > 0 & salary_tep2$pay_per_hour <200, ]

set.seed(123)
sampled_indices <- sample(nrow(salary_tep2),150)
sampled_df <- salary_tep2[sampled_indices, ]

sampled_df %>%
  arrange(desc(days_difference)) %>%
  ggplot(aes(x=OT.Hours, y=pay_per_hour, size=days_difference, color=Title.Description)) +
    geom_point(alpha=0.5) +
    scale_size_continuous(range = c(.1, 10), name="days_difference")

sampled_df %>%
  arrange(desc(days_difference)) %>%
  ggplot(aes(x=AnnualSalary, y=OT.Hours, size=days_difference, color=Title.Description)) +
    geom_point(alpha=0.5) +
    scale_size_continuous(range = c(.1, 10), name="days_difference")

sampled_df %>%
  arrange(desc(days_difference)) %>%
  ggplot(aes(x=AnnualSalary, y=pay_per_hour, size=days_difference, color=Title.Description)) +
    geom_point(alpha=0.5) +
    scale_size_continuous(range = c(.1, 10), name="days_difference")

```

```{r}
salary_OT<- salary |>
  mutate(OTLevel = case_when(
    OT.Hours == 0 ~ "None",
    OT.Hours > 0 & OT.Hours <= 200  ~ "LOW",
    OT.Hours > 200 & OT.Hours <= 400 ~ "MOD",
    OT.Hours > 400 & OT.Hours <= 1000 ~ "HIGH",
    OT.Hours > 1000  ~ "VHIGH"))
```

```{r Ggalluvial}
library(ggalluvial)
frequency_df <- salary_OT %>%
  group_by(Agency.Name, Title.Description, job_type, Work.Location.Borough,SalaryLevel,OTLevel) %>%
  summarize(Frequency = n(), .groups = 'drop')
frequency_df

frequency_df$OTLevel <- factor(frequency_df$OTLevel, levels = c("VHIGH", "HIGH", "MOD", "LOW","None")) 
frequency_df$SalaryLevel <- factor(frequency_df$SalaryLevel, levels = c("VHIGH", "HIGH", "MOD", "LOW"))



ggplot(frequency_df, aes(axis1 = Agency.Name, axis2 = Title.Description, axis3 = job_type, axis4 = Work.Location.Borough, axis5 = SalaryLevel, axis6 = OTLevel, y = Frequency)) +
  geom_alluvium(aes(fill = SalaryLevel)) +  
  geom_stratum(aes(fill = SalaryLevel)) +  
  geom_text(stat = "stratum", aes(label = after_stat(stratum)),size=1.5) +
  scale_x_discrete(limits = c("Agency.Name", "Title.Description", "job_type", "Work.Location.Borough", "SalaryLevel", "OTLevel")) +
  guides(fill = "none") 

```
